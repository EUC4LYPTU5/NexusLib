

--[[ because king is a fucking moron
]]
	_G.XathenaGradient = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(76, 28, 138)), ColorSequenceKeypoint.new(1, Color3.fromRGB(131, 45, 161))}
local uis = game:GetService("UserInputService")
local run = game:GetService("RunService")

if game:GetService("CoreGui"):FindFirstChild("Athena ui Remake") then
	game:GetService("CoreGui"):FindFirstChild("Athena ui Remake"):Destroy()
end

local ret = {}
local settings = {
	blur = true;
	disablechat = true;
	vis = false;
}

function ret:Library(Name)
	local ui = {}
	local m = 0
	local aui = Instance.new("ScreenGui")

	aui.Parent = game:GetService("CoreGui")
	aui.IgnoreGuiInset = true
	aui.Name = "Athena ui Remake"

	local rtbl = {}
	local NormalColor = Color3.new(0,0,0)
	local ErrorColor = Color3.fromRGB(38, 11, 11)
	local NormalSound = Instance.new("Sound")
	local ErrorSound = Instance.new("Sound")
	local NoteSample = Instance.new("Frame")
	local Frame = Instance.new("Frame")
	local textName = Instance.new("TextLabel")
	local textMessage = Instance.new("TextLabel")
	local UITextSizeConstraint = Instance.new("UITextSizeConstraint")
	local Notifications = Instance.new("Frame")
	local Blur = Instance.new("BlurEffect",game:GetService("Lighting"))

	Blur.Name = "Athena Blur"
	Blur.Enabled = false
	Blur.Size = 24

	Notifications.Name = "Notifications"
	Notifications.Parent = aui
	Notifications.AnchorPoint = Vector2.new(1, 0)
	Notifications.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Notifications.BackgroundTransparency = 1.000
	Notifications.Position = UDim2.new(.13, 10, 1, -230)
	Notifications.Size = UDim2.new(0, 250, 0, 100)
	Notifications.ZIndex = 16

	NoteSample.Name = "NoteSample"
	NoteSample.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	NoteSample.BackgroundTransparency = 1.000
	NoteSample.BorderSizePixel = 0
	NoteSample.Position = UDim2.new(0, -180, 0, 0)
	NoteSample.Size = UDim2.new(1, 0, 0, 40)
	NoteSample.ZIndex = 16

	Frame.Parent = NoteSample
	Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Frame.BackgroundTransparency = 0.300
	Frame.BorderSizePixel = 0
	Frame.Size = UDim2.new(1, 0, 1, 0)
	Frame.ZIndex = 16

	textName.Name = "textName"
	textName.Parent = Frame
	textName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	textName.BackgroundTransparency = 1.000
	textName.BorderSizePixel = 0
	textName.Size = UDim2.new(1, 0, 0.5, 0)
	textName.ZIndex = 16
	textName.Font = Enum.Font.SourceSansBold
	textName.Text = ""
	textName.TextColor3 = Color3.fromRGB(255, 255, 255)
	textName.TextSize = 18.000
	textName.TextWrapped = true

	textMessage.Name = "textMessage"
	textMessage.Parent = Frame
	textMessage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	textMessage.BackgroundTransparency = 1.000
	textMessage.BorderSizePixel = 0
	textMessage.Position = UDim2.new(0, 0, 0.5, 0)
	textMessage.Size = UDim2.new(1, 0, 0.5, 0)
	textMessage.ZIndex = 16
	textMessage.Font = Enum.Font.SourceSansItalic
	textMessage.Text = ""
	textMessage.TextColor3 = Color3.fromRGB(221, 221, 221)
	textMessage.TextScaled = true
	textMessage.TextSize = 18.000
	textMessage.TextWrapped = true
	textMessage.TextYAlignment = Enum.TextYAlignment.Top

	UITextSizeConstraint.Parent = textMessage
	UITextSizeConstraint.MaxTextSize = 18

	NormalSound.SoundId = "rbxassetid://2254874567"
	NormalSound.Volume = 0.28
	NormalSound.Parent = aui
	ErrorSound.SoundId = "rbxassetid://2254874567"
	ErrorSound.Volume = 0.28
	ErrorSound.Parent = aui

	local draggable = function(obj)
        task.spawn(function()
            local minitial
            local initial
            local isdragging
            obj.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isdragging = true
                    minitial = input.Position
                    initial = obj.Position
                    local con
                    con = run.Stepped:Connect(function()
                        if isdragging then
							local mouse = uis:GetMouseLocation() - Vector2.new(0,game:GetService("GuiService"):GetGuiInset().Y)
                            local delta = Vector3.new(mouse.X, mouse.Y, 0) - minitial
                            obj.Position = UDim2.new(initial.X.Scale, initial.X.Offset + delta.X, initial.Y.Scale, initial.Y.Offset + delta.Y)
                        else
                            con:Disconnect()
                        end
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            isdragging = false
                        end
                    end)
                end
            end)
        end)
	end
	
	uis.InputBegan:Connect(function(m3,m2)
		if m3.KeyCode == Enum.KeyCode.P and not m2 then
			settings.vis = not settings.vis
			for i,v in pairs(aui:GetChildren()) do
				if v.Name:find("Window") then
					if settings.vis then
						v.Visible = true
						game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.Chat, not settings.disablechat)
						Blur.Enabled = settings.blur
					else
						v.Visible = false
						game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
						Blur.Enabled = false
					end
				end
			end
		end
	end)

	function ui:Note(Title,Message,Error)
        local Note = NoteSample:Clone()

        Note.Position = UDim2.new(0, 0, 0, 0)
        Note.Frame.Position = UDim2.new(-1, 0, 0, 0)
        rtbl[Note] = Note.Position
        Note.Frame.textMessage.Text = tostring(Message)
        Note.Frame.textName.Text = tostring(Title)

        for i,v in pairs(Notifications:GetChildren()) do
            rtbl[v] = rtbl[v] - UDim2.new(0, 0, 0, 42)
            v:TweenPosition(rtbl[v], "Out", "Quad", 0.35, true)
        end

        if Error then
		ErrorSound:Play()
	else
		NormalSound:Play()
	end

        Note.Frame.BackgroundColor3 = ((Error and ErrorColor) or (not Error and NormalColor))
        Note.Parent = Notifications
        Note.Frame:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Back", 0.5, true)

        task.spawn(function()
            task.wait(8)
            Note.Frame:TweenPosition(UDim2.new(-1.1, 0, 0, 0), "Out", "Quad", 1, true)
            task.wait(1)
            Note:Destroy()
            rtbl[Note] = nil
        end)
    end

	function ui:Window(title)
    local self = {}
    local m = 0 -- Make sure to set your window index somewhere for positioning
    
    local Window1 = Instance.new("Frame")
    local Top = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local Min = Instance.new("TextButton")
    local Max = Instance.new("TextButton")
    local Holder = Instance.new("Frame")
    local UIPadding = Instance.new("UIPadding")

    -- Window
    Window1.Name = "Window"..tostring(m)
    Window1.Parent = aui
    Window1.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Dark gray background
    Window1.Position = UDim2.new(0,10 + (170*m), 0, 20)
    Window1.Size = UDim2.new(0, 160, 0, 274)
    Window1.Active = true
    Window1.ClipsDescendants = true
    Window1.BorderSizePixel = 0
    Window1.Visible = true
    Window1.AnchorPoint = Vector2.new(0,0)
    Window1.AutomaticSize = Enum.AutomaticSize.None
    Window1.LayoutOrder = m
    
    -- Rounded corners
    local corner = Instance.new("UICorner", Window1)
    corner.CornerRadius = UDim.new(0, 8)

    -- Top bar
    Top.Name = "Top"
    Top.Parent = Window1
    Top.BackgroundColor3 = Color3.fromRGB(18, 18, 18) -- darker bar
    Top.Size = UDim2.new(1, 0, 0, 28)
    Top.BorderSizePixel = 0

    -- Rounded corners top only
    local topCorner = Instance.new("UICorner", Top)
    topCorner.CornerRadius = UDim.new(0, 8)

    -- Gradient accent on Top bar
    local UIGradient = Instance.new("UIGradient", Top)
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)), -- cyan top
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 170, 255)) -- blue bottom
    }
    UIGradient.Rotation = 90

    -- Title Text
    TextLabel.Parent = Top
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(0.7, 0, 1, 0)
    TextLabel.Position = UDim2.new(0.05, 0, 0, 0)
    TextLabel.Font = Enum.Font.GothamBold
    TextLabel.Text = tostring(title)
    TextLabel.TextColor3 = Color3.fromRGB(180, 255, 255)
    TextLabel.TextSize = 18
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Minimize button
    Min.Name = "Min"
    Min.Parent = Top
    Min.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
    Min.Size = UDim2.new(0, 26, 0, 24)
    Min.Position = UDim2.new(0.85, 0, 0, 2)
    Min.BorderSizePixel = 0
    Min.Text = "-"
    Min.Font = Enum.Font.GothamBold
    Min.TextSize = 28
    Min.TextColor3 = Color3.fromRGB(180, 255, 255)
    Min.TextTransparency = 0.1

    -- Hover effect for Min
    Min.MouseEnter:Connect(function()
        Min.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        Min.TextColor3 = Color3.fromRGB(20, 20, 20)
    end)
    Min.MouseLeave:Connect(function()
        Min.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
        Min.TextColor3 = Color3.fromRGB(180, 255, 255)
    end)

    -- Maximize button
    Max.Name = "Max"
    Max.Parent = Top
    Max.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
    Max.Size = UDim2.new(0, 26, 0, 24)
    Max.Position = UDim2.new(0.70, 0, 0, 2)
    Max.BorderSizePixel = 0
    Max.Text = "+"
    Max.Font = Enum.Font.GothamBold
    Max.TextSize = 28
    Max.TextColor3 = Color3.fromRGB(180, 255, 255)
    Max.TextTransparency = 0.1

    -- Hover effect for Max
    Max.MouseEnter:Connect(function()
        Max.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        Max.TextColor3 = Color3.fromRGB(20, 20, 20)
    end)
    Max.MouseLeave:Connect(function()
        Max.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
        Max.TextColor3 = Color3.fromRGB(180, 255, 255)
    end)

    -- Holder
    Holder.Name = "Holder"
    Holder.Parent = Window1
    Holder.Position = UDim2.new(0, 0, 0, 28)
    Holder.Size = UDim2.new(1, 0, 1, -28)
    Holder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Holder.BorderSizePixel = 0

    -- Rounded corners on Holder for smoother look
    local holderCorner = Instance.new("UICorner", Holder)
    holderCorner.CornerRadius = UDim.new(0, 8)

    -- Padding inside Holder
    UIPadding.Parent = Holder
    UIPadding.PaddingBottom = UDim.new(0, 6)
    UIPadding.PaddingLeft = UDim.new(0, 6)
    UIPadding.PaddingRight = UDim.new(0, 6)
    UIPadding.PaddingTop = UDim.new(0, 6)

    -- Minimize functionality
    Min.MouseButton1Click:Connect(function()
        Holder.Visible = false
        Min.Text = ""
        Max.Text = "+"
    end)

    -- Maximize functionality
    Max.MouseButton1Click:Connect(function()
        Holder.Visible = true
        Min.Text = "-"
        Max.Text = ""
    end)

    -- Draggable Top bar (you might have your own draggable function)
    draggable(Top)

    self.Window = Window1
    self.Holder = Holder

    return self
end


		local function resize()
			local m = 0
			local m2 = -1
			for i,v in pairs(Holder:GetChildren()) do
			    if v:IsA("Frame") then
    				m = m + v.AbsoluteSize.Y + 4
			    end
			end
			for i,v in pairs(Holder:GetChildren()) do
				if v:IsA("Frame") then
					m2 = m2 + 1
					v.Position = UDim2.new(0,0,0,(24*m2))
				end
			end
			Holder.Size = UDim2.new(0,160,0,m+2)
		end

		function self:Toggle(name, b, f)
    local tog = b

    local Toggle = Instance.new("Frame")
    Toggle.Name = "Toggle"
    Toggle.Parent = Holder
    Toggle.Size = UDim2.new(0, 154, 0, 20)
    Toggle.BackgroundColor3 = _G.ElementBackgroundColor
    Toggle.BackgroundTransparency = 0.2

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Toggle

    local TextButton = Instance.new("TextButton")
    TextButton.Parent = Toggle
    TextButton.BackgroundTransparency = 1
    TextButton.Size = UDim2.new(0, 148, 0, 20)
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.Text = tostring(name)
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = (tog and _G.XathenaGradient or ColorSequence.new{
        ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
        ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
    })
    UIGradient.Rotation = 90
    UIGradient.Parent = Toggle

    if b then pcall(task.spawn, f, b) end

    TextButton.MouseButton1Down:Connect(function()
        tog = not tog
        UIGradient.Color = (tog and _G.XathenaGradient or ColorSequence.new{
            ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
            ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
        })
        pcall(task.spawn, f, tog)
    end)

    resize()
end


		function self:Button(n, f)
    local Button = Instance.new("Frame")
    local TextButton = Instance.new("TextButton")

    Button.Name = "Button"
    Button.Parent = Holder
    Button.BackgroundColor3 = _G.ElementBackgroundColor
    Button.BackgroundTransparency = 0.2
    Button.Size = UDim2.new(0, 154, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Button

    TextButton.Parent = Button
    TextButton.BackgroundTransparency = 1
    TextButton.Size = UDim2.new(0, 148, 0, 20)
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.Text = tostring(n)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    TextButton.MouseButton1Down:Connect(f)
    resize()
end


		function self:Keybind(n, d, f)
    local k = d
    local selecting = false

    local Keybind = Instance.new("Frame")
    Keybind.Name = "Keybind"
    Keybind.Parent = Holder
    Keybind.BackgroundColor3 = _G.ElementBackgroundColor
    Keybind.BackgroundTransparency = 0.2
    Keybind.Size = UDim2.new(0, 154, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Keybind

    local TextButton = Instance.new("TextButton")
    TextButton.Parent = Keybind
    TextButton.BackgroundTransparency = 1
    TextButton.Size = UDim2.new(0, 148, 0, 20)
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.Text = tostring(n).." : "..tostring(d):sub(14):lower()
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    uis.InputBegan:Connect(function(m, m2)
        if not m2 and not selecting and m.KeyCode == k then
            pcall(task.spawn, f, k)
        end
    end)

    TextButton.MouseButton1Down:Connect(function()
        TextButton.Text = tostring(n).." : ..."
        selecting = true
        local con
        con = uis.InputBegan:Connect(function(m)
            if m.KeyCode ~= Enum.KeyCode.Unknown then
                k = m.KeyCode
                TextButton.Text = tostring(n).." : "..tostring(k):sub(14):lower()
                selecting = false
                con:Disconnect()
            end
        end)
    end)

    resize()
end


			TextButton.MouseButton1Down:Connect(function()
				TextButton.Text = tostring(n).." : ..."
				selecting = true
				local con; con = uis.InputBegan:Connect(function(m)
					if m.KeyCode ~= Enum.KeyCode.Unknown then
						k = m.KeyCode
						TextButton.Text = tostring(n).." : "..tostring(k):sub(14):lower()
						selecting = false
						con:Disconnect()
					end
				end)
			end)
			resize()
		end

		function self:Label(text)
    local Label = Instance.new("Frame")
    Label.Name = "Label"
    Label.Parent = Holder
    Label.BackgroundColor3 = _G.ElementBackgroundColor
    Label.BackgroundTransparency = 0.2
    Label.Size = UDim2.new(0, 154, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Label

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "TextLabel"
    TextLabel.Parent = Label
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.032, 0, 0.05, 0)
    TextLabel.Size = UDim2.new(0, 148, 0, 20)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = tostring(text)
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 15
    TextLabel.TextStrokeTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    resize()
end

		function self:Slider(n, min, max, default, precise, f)
    local Slider = Instance.new("Frame")
    Slider.Name = "Slider"
    Slider.Parent = Holder
    Slider.BackgroundColor3 = _G.ElementBackgroundColor
    Slider.BackgroundTransparency = 0.2
    Slider.Size = UDim2.new(0, 154, 0, 20)

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = Slider

    local SliderFrame = Instance.new("TextButton")
    SliderFrame.Parent = Slider
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Size = UDim2.new(0, 148, 0, 20)
    SliderFrame.Position = UDim2.new(0.026, 0, 0, 0)
    SliderFrame.Font = Enum.Font.SourceSansBold
    SliderFrame.Text = tostring(n)..": "..tostring(default)
    SliderFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderFrame.TextSize = 15
    SliderFrame.TextStrokeTransparency = 1
    SliderFrame.ZIndex = 2

    local Slider_2 = Instance.new("TextButton")
    Slider_2.Name = "Slider"
    Slider_2.Parent = Slider
    Slider_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Slider_2.BackgroundTransparency = 0.2
    Slider_2.BorderSizePixel = 1
    Slider_2.Position = UDim2.new(0, 0, 0, 1)
    Slider_2.Size = UDim2.new(0, 12, 0, 18)
    Slider_2.Text = ""
    Slider_2.TextColor3 = Color3.fromRGB(0, 0, 0)
    Slider_2.TextSize = 15

    local SliderCorner2 = Instance.new("UICorner")
    SliderCorner2.CornerRadius = UDim.new(0, 6)
    SliderCorner2.Parent = Slider_2

    local OnToggleGradient = Instance.new("UIGradient")
    OnToggleGradient.Color = _G.XathenaGradient
    OnToggleGradient.Rotation = 90
    OnToggleGradient.Name = "OnToggleGradient"
    OnToggleGradient.Parent = Slider_2

    local con
    uis.InputEnded:Connect(function(m)
        if m.UserInputType == Enum.UserInputType.MouseButton1 then
            if con then
                con:Disconnect()
                con = nil
            end
        end
    end)

    local function move()
        if not con then
            con = run.Stepped:Connect(function()
                local m = uis:GetMouseLocation()
                local r = math.clamp(((m.X - Slider_2.AbsoluteSize.X) - SliderFrame.AbsolutePosition.X) / SliderFrame.AbsoluteSize.X, 0, 1)
                local vtn = min + (max - min) * r
                vtn = math.clamp(vtn, min, max)

                if precise then
                    vtn = tonumber(tostring(vtn):sub(1, 4))
                else
                    vtn = math.round(vtn)
                end

                Slider_2.Position = UDim2.new(r * 0.92, 0, 0, 1)
                SliderFrame.Text = tostring(n)..": "..tostring(vtn)
                pcall(task.spawn, f, vtn)
            end)
        end
    end

    SliderFrame.MouseButton1Down:Connect(move)
    Slider_2.MouseButton1Down:Connect(move)
    resize()
end

    
            local function move()
                if not con then
        			con = run.Stepped:Connect(function()
        				local m = uis:GetMouseLocation()
        				local r = math.clamp(((m.X-Slider_2.AbsoluteSize.X) - SliderFrame.AbsolutePosition.X)/(SliderFrame.AbsoluteSize.X),0,1)
        				local vtn = min + (max - min)*r
        
        				vtn = math.clamp(vtn,min,max)
                        Slider_2.Position = UDim2.new(r*.92, 0, 0, 1)
        
        				if not precise then
							vtn = math.round(vtn)
						else
							vtn = tonumber(tostring(vtn):sub(1,4))
						end

						SliderFrame.Text = tostring(n)..": "..tostring(vtn)
						pcall(task.spawn, f, vtn)
        			end)
                end
            end
            
    		SliderFrame.MouseButton1Down:Connect(move)
    		Slider_2.MouseButton1Down:Connect(move)
			resize()
		end

		function self:TextBox(n, find, f)
    local fs = ""

    local Textbox = Instance.new("Frame")
    Textbox.Name = "Textbox"
    Textbox.Parent = Holder
    Textbox.BackgroundColor3 = _G.ElementBackgroundColor
    Textbox.BackgroundTransparency = 0.2
    Textbox.Size = UDim2.new(0, 154, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Textbox

    local TextBox = Instance.new("TextBox")
    TextBox.Parent = Textbox
    TextBox.BackgroundTransparency = 1
    TextBox.Size = UDim2.new(0, 148, 0, 20)
    TextBox.Position = UDim2.new(0.026, 0, 0, 0)
    TextBox.ZIndex = 2
    TextBox.PlaceholderText = tostring(n)
    TextBox.Font = Enum.Font.SourceSansBold
    TextBox.Text = ""
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.TextSize = 15
    TextBox.TextStrokeTransparency = 1
    TextBox.TextXAlignment = Enum.TextXAlignment.Left

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "TextLabel"
    TextLabel.Parent = Textbox
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.026, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 148, 0, 20)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = ""
    TextLabel.TextColor3 = Color3.fromRGB(179, 179, 179)
    TextLabel.TextSize = 15
    TextLabel.TextStrokeTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    TextBox.Changed:Connect(function(t)
        if t == "Text" and find ~= nil then
            local text = TextBox.Text
            TextLabel.Text = ""
            fs = ""

            if typeof(find) == "string" and find:lower() == "players" and text ~= "" then
                for _, v in ipairs(game:GetService("Players"):GetPlayers()) do
                    if v.Name:lower():find(text:lower()) then
                        TextLabel.Text = text .. v.Name:sub(#text + 1)
                        fs = v.Name
                        break
                    end
                    if v.DisplayName:lower():find(text:lower()) then
                        TextLabel.Text = text .. v.DisplayName:sub(#text + 1)
                        fs = v.DisplayName
                        break
                    end
                end
            elseif typeof(find) == "table" and text ~= "" then
                for _, v in pairs(find) do
                    local str = tostring(v)
                    if str:lower():find(text:lower()) then
                        TextLabel.Text = text .. str:sub(#text + 1)
                        fs = str
                        break
                    end
                end
            end
        end
    end)

    TextBox.FocusLost:Connect(function()
        if uis:IsKeyDown(Enum.KeyCode.RightShift) or uis:IsKeyDown(Enum.KeyCode.LeftShift) then
            pcall(task.spawn, f, TextLabel.Text)
            TextBox.Text = fs
            TextLabel.Text = ""
        else
            pcall(task.spawn, f, TextBox.Text)
            TextLabel.Text = ""
        end
    end)

    resize()
end


		function self:Dropdown(n, l, f)
    local openg = false

    local Dropdown = Instance.new("Frame")
    Dropdown.Name = "Dropdown"
    Dropdown.Parent = Holder
    Dropdown.BackgroundColor3 = _G.ElementBackgroundColor
    Dropdown.BackgroundTransparency = 0.2
    Dropdown.Size = UDim2.new(0, 154, 0, 20)

    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 6)
    DropdownCorner.Parent = Dropdown

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "TextLabel"
    TextLabel.Parent = Dropdown
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.026, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 128, 0, 20)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = tostring(n)
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 15
    TextLabel.TextStrokeTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    local ImageButton = Instance.new("ImageButton")
    ImageButton.Parent = Dropdown
    ImageButton.BackgroundTransparency = 1
    ImageButton.Position = UDim2.new(0.854, 0, 0.05, 0)
    ImageButton.Size = UDim2.new(0, 16, 0, 18)
    ImageButton.Image = "rbxassetid://6545531971"

    local DFrame = Instance.new("Frame")
    DFrame.Name = "DFrame"
    DFrame.Parent = Dropdown
    DFrame.BackgroundColor3 = _G.ElementBackgroundColor
    DFrame.BackgroundTransparency = 0.2
    DFrame.Position = UDim2.new(0, 0, 1, 0)
    DFrame.Size = UDim2.new(0, 154, 0, 100)
    DFrame.Visible = false

    local DFrameCorner = Instance.new("UICorner")
    DFrameCorner.CornerRadius = UDim.new(0, 6)
    DFrameCorner.Parent = DFrame

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = DFrame
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 4)

    local UIPadding = Instance.new("UIPadding")
    UIPadding.Parent = DFrame
    UIPadding.PaddingBottom = UDim.new(0, 4)
    UIPadding.PaddingLeft = UDim.new(0, 4)
    UIPadding.PaddingRight = UDim.new(0, 4)
    UIPadding.PaddingTop = UDim.new(0, 4)

    local function getsize()
        local m = 4
        for _, v in pairs(DFrame:GetChildren()) do
            if v:IsA("Frame") then
                m = m + (v.AbsoluteSize.Y + 4)
            end
        end
        return m
    end

    local function up()
        local overi = 1
        for i, v in pairs(Holder:GetChildren()) do
            if v == Dropdown then
                overi = i
                break
            end
        end

        Window1.Size = Window1.Size - UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
        Holder.Size = Holder.Size - UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)

        for i, v in pairs(Holder:GetChildren()) do
            if v:IsA("Frame") and i > overi then
                v.Position = v.Position - UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
            end
        end
    end

    local function down()
        local overi = 1
        for i, v in pairs(Holder:GetChildren()) do
            if v == Dropdown then
                overi = i
                break
            end
        end

        Window1.Size = Window1.Size + UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
        Holder.Size = Holder.Size + UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)

        for i, v in pairs(Holder:GetChildren()) do
            if v:IsA("Frame") and i > overi then
                v.Position = v.Position + UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
            end
        end
    end

    local function add(thing)
        local OptionParent = Instance.new("Frame")
        OptionParent.Name = "OptionParent"
        OptionParent.Parent = DFrame
        OptionParent.BackgroundColor3 = _G.ElementBackgroundColor
        OptionParent.BackgroundTransparency = 0.3
        OptionParent.Size = UDim2.new(0, 146, 0, 20)

        local OptionUICorner = Instance.new("UICorner")
        OptionUICorner.CornerRadius = UDim.new(0, 6)
        OptionUICorner.Parent = OptionParent

        local Option = Instance.new("TextButton")
        Option.Name = "Option"
        Option.Parent = OptionParent
        Option.BackgroundTransparency = 1
        Option.Position = UDim2.new(0.026, 0, 0, 0)
        Option.Size = UDim2.new(0, 140, 0, 20)
        Option.Text = tostring(thing)
        Option.Font = Enum.Font.SourceSansBold
        Option.TextColor3 = Color3.fromRGB(255, 255, 255)
        Option.TextSize = 15
        Option.TextStrokeTransparency = 1
        Option.TextXAlignment = Enum.TextXAlignment.Left

        Option.MouseButton1Down:Connect(function()
            task.wait(0.05)
            up()
            openg = false
            DFrame.Visible = false
            ImageButton.Rotation = 0
            pcall(task.spawn, f, thing)
        end)
    end

    ImageButton.MouseButton1Down:Connect(function()
        DFrame.Size = UDim2.new(0, 154, 0, getsize())
        ImageButton.Rotation = (not openg and 180) or (openg and 0)
        openg = not openg
        DFrame.Visible = openg
        if openg then
            down()
        else
            up()
        end
    end)

    for _, v in pairs(l) do
        add(v)
        DFrame.Size = UDim2.new(0, 154, 0, getsize())
    end

    resize()
end


		function self:ToggleDropdown(n, de, fu)
    local self2 = {}
    local togg = de
    local openg = false

    local Dropdown = Instance.new("Frame")
    Dropdown.Name = "Dropdown"
    Dropdown.Parent = Holder
    Dropdown.BackgroundColor3 = _G.ElementBackgroundColor
    Dropdown.BackgroundTransparency = 0.2
    Dropdown.Size = UDim2.new(0, 154, 0, 20)

    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 6)
    DropdownCorner.Parent = Dropdown

    local TextLabel = Instance.new("TextButton")
    TextLabel.Name = "TextLabel"
    TextLabel.Parent = Dropdown
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.026, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 128, 0, 20)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = tostring(n)
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.TextSize = 15
    TextLabel.TextStrokeTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    local Gradient = Instance.new("UIGradient")
    Gradient.Color = (togg and _G.XathenaGradient) or ColorSequence.new{
        ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
        ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
    }
    Gradient.Rotation = 90
    Gradient.Parent = Dropdown

    local ImageButton = Instance.new("ImageButton")
    ImageButton.Parent = Dropdown
    ImageButton.BackgroundTransparency = 1
    ImageButton.Position = UDim2.new(0.854, 0, 0.05, 0)
    ImageButton.Size = UDim2.new(0, 16, 0, 18)
    ImageButton.Image = "rbxassetid://6545531971"

    local DFrame = Instance.new("Frame")
    DFrame.Name = "DFrame"
    DFrame.Parent = Dropdown
    DFrame.BackgroundColor3 = _G.ElementBackgroundColor
    DFrame.BackgroundTransparency = 0.2
    DFrame.Position = UDim2.new(0, 0, 1, 0)
    DFrame.Size = UDim2.new(0, 154, 0, 100)
    DFrame.Visible = false

    local DFrameCorner = Instance.new("UICorner")
    DFrameCorner.CornerRadius = UDim.new(0, 6)
    DFrameCorner.Parent = DFrame

    local UIPadding = Instance.new("UIPadding")
    UIPadding.Parent = DFrame
    UIPadding.PaddingBottom = UDim.new(0, 4)
    UIPadding.PaddingLeft = UDim.new(0, 4)
    UIPadding.PaddingRight = UDim.new(0, 4)
    UIPadding.PaddingTop = UDim.new(0, 4)

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = DFrame
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 4)

    local function getsize()
        local totalHeight = 4
        for _, v in pairs(DFrame:GetChildren()) do
            if v:IsA("Frame") then
                totalHeight = totalHeight + v.AbsoluteSize.Y + 4
            end
        end
        return totalHeight
    end

    local function up()
        local index = 1
        for i, v in pairs(Holder:GetChildren()) do
            if v == Dropdown then
                index = i
                break
            end
        end

        Window1.Size -= UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
        Holder.Size -= UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)

        for i, v in pairs(Holder:GetChildren()) do
            if v:IsA("Frame") and i > index then
                v.Position -= UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
            end
        end
    end

    local function down()
        local index = 1
        for i, v in pairs(Holder:GetChildren()) do
            if v == Dropdown then
                index = i
                break
            end
        end

        Window1.Size += UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
        Holder.Size += UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)

        for i, v in pairs(Holder:GetChildren()) do
            if v:IsA("Frame") and i > index then
                v.Position += UDim2.new(0, 0, 0, DFrame.AbsoluteSize.Y)
            end
        end
    end

    TextLabel.MouseButton1Down:Connect(function()
        togg = not togg
        Gradient.Color = (togg and _G.XathenaGradient) or ColorSequence.new{
            ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
            ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
        }
        pcall(task.spawn, fu, togg)
    end)

    if de then
        pcall(task.spawn, fu, de)
    end

    -- You may add extra toggled dropdown options to DFrame here, if needed

    return self2
end


function self2:Toggle(name, b, f)
    local tog = b

    local Toggle = Instance.new("Frame")
    Toggle.Name = "Toggle"
    Toggle.Parent = DFrame
    Toggle.BackgroundColor3 = _G.ElementBackgroundColor
    Toggle.BackgroundTransparency = 0.2
    Toggle.Size = UDim2.new(0, 146, 0, 20)

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 6)
    ToggleCorner.Parent = Toggle

    local TextButton = Instance.new("TextButton")
    TextButton.Parent = Toggle
    TextButton.BackgroundTransparency = 1
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Size = UDim2.new(0, 140, 0, 20)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.Text = tostring(name)
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    local Gradient = Instance.new("UIGradient")
    Gradient.Color = (tog and _G.XathenaGradient) or ColorSequence.new{
        ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
        ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
    }
    Gradient.Rotation = 90
    Gradient.Parent = Toggle

    if b then pcall(task.spawn, f, b) end

    TextButton.MouseButton1Down:Connect(function()
        tog = not tog
        Gradient.Color = (tog and _G.XathenaGradient) or ColorSequence.new{
            ColorSequenceKeypoint.new(0, _G.ElementBackgroundColor),
            ColorSequenceKeypoint.new(1, _G.ElementBackgroundColor)
        }
        pcall(task.spawn, f, tog)
    end)
end

			function self2:Button(n, f)
    local Button = Instance.new("Frame")
    Button.Name = "Button"
    Button.Parent = DFrame
    Button.BackgroundColor3 = _G.ElementBackgroundColor
    Button.BackgroundTransparency = 0.2
    Button.Size = UDim2.new(0, 146, 0, 20)

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 6)
    ButtonCorner.Parent = Button

    local TextButton = Instance.new("TextButton")
    TextButton.Parent = Button
    TextButton.BackgroundTransparency = 1
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Size = UDim2.new(0, 140, 0, 20)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.Text = tostring(n)
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    TextButton.MouseButton1Down:Connect(f)
end

	
			function self2:Keybind(n, d, f)
    local k = d
    local selecting = false

    local Keybind = Instance.new("Frame")
    Keybind.Name = "Keybind"
    Keybind.Parent = DFrame
    Keybind.BackgroundColor3 = _G.ElementBackgroundColor
    Keybind.BackgroundTransparency = 0.2
    Keybind.Size = UDim2.new(0, 146, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Keybind

    local TextButton = Instance.new("TextButton")
    TextButton.Parent = Keybind
    TextButton.BackgroundTransparency = 1
    TextButton.Position = UDim2.new(0.026, 0, 0, 0)
    TextButton.Size = UDim2.new(0, 140, 0, 20)
    TextButton.Font = Enum.Font.SourceSansBold
    TextButton.Text = tostring(n) .. " : " .. tostring(d):sub(14):lower()
    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextButton.TextSize = 15
    TextButton.TextStrokeTransparency = 1
    TextButton.TextXAlignment = Enum.TextXAlignment.Left

    uis.InputBegan:Connect(function(m, m2)
        if not m2 and not selecting and m.KeyCode == k then
            pcall(task.spawn, f, k)
        end
    end)

    TextButton.MouseButton1Down:Connect(function()
        TextButton.Text = tostring(n) .. " : ..."
        selecting = true
        local con
        con = uis.InputBegan:Connect(function(m)
            if m.KeyCode ~= Enum.KeyCode.Unknown then
                k = m.KeyCode
                TextButton.Text = tostring(n) .. " : " .. tostring(k):sub(14):lower()
                selecting = false
                con:Disconnect()
            end
        end)
    end)
end

	
			function self2:Slider(n, min, max, default, precise, f)
    local con

    local Slider = Instance.new("Frame")
    Slider.Name = "Slider"
    Slider.Parent = DFrame
    Slider.BackgroundColor3 = _G.ElementBackgroundColor
    Slider.BackgroundTransparency = 0.2
    Slider.Size = UDim2.new(0, 146, 0, 20)

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = Slider

    local SliderFrame = Instance.new("TextButton")
    SliderFrame.Parent = Slider
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Position = UDim2.new(0.026, 0, 0, 0)
    SliderFrame.Size = UDim2.new(0, 140, 0, 20)
    SliderFrame.Font = Enum.Font.SourceSansBold
    SliderFrame.Text = tostring(n) .. ": " .. tostring(default)
    SliderFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderFrame.TextSize = 15
    SliderFrame.TextStrokeTransparency = 1
    SliderFrame.ZIndex = 2

    local Slider_2 = Instance.new("TextButton")
    Slider_2.Name = "Slider"
    Slider_2.Parent = Slider
    Slider_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Slider_2.BackgroundTransparency = 0.2
    Slider_2.BorderSizePixel = 1
    Slider_2.Position = UDim2.new(0, 0, 0, 1)
    Slider_2.Size = UDim2.new(0, 12, 0, 18)
    Slider_2.Text = ""
    Slider_2.Font = Enum.Font.SourceSans
    Slider_2.TextColor3 = Color3.fromRGB(0, 0, 0)
    Slider_2.TextSize = 15

    local SliderKnobCorner = Instance.new("UICorner")
    SliderKnobCorner.CornerRadius = UDim.new(0, 6)
    SliderKnobCorner.Parent = Slider_2

    local OnToggleGradient = Instance.new("UIGradient")
    OnToggleGradient.Color = _G.XathenaGradient
    OnToggleGradient.Rotation = 90
    OnToggleGradient.Name = "OnToggleGradient"
    OnToggleGradient.Parent = Slider_2

    uis.InputEnded:Connect(function(m)
        if m.UserInputType == Enum.UserInputType.MouseButton1 then
            if con then
                con:Disconnect()
                con = nil
            end
        end
    end)

    local function move()
        if not con then
            con = run.Stepped:Connect(function()
                local m = uis:GetMouseLocation()
                local rel = math.clamp(((m.X - Slider_2.AbsoluteSize.X) - SliderFrame.AbsolutePosition.X) / SliderFrame.AbsoluteSize.X, 0, 1)
                local vtn = min + (max - min) * rel

                vtn = math.clamp(vtn, min, max)
                Slider_2.Position = UDim2.new(rel * 0.92, 0, 0, 1)

                if not precise then
                    vtn = math.round(vtn)
                else
                    vtn = tonumber(tostring(vtn):sub(1, 4))
                end

                SliderFrame.Text = tostring(n) .. ": " .. tostring(vtn)
                pcall(task.spawn, f, vtn)
            end)
        end
    end

    SliderFrame.MouseButton1Down:Connect(move)
    Slider_2.MouseButton1Down:Connect(move)
end

	
			function self2:TextBox(n, find, f)
    local fs = ""

    local Textbox = Instance.new("Frame")
    Textbox.Name = "Textbox"
    Textbox.Parent = DFrame
    Textbox.BackgroundColor3 = _G.ElementBackgroundColor
    Textbox.BackgroundTransparency = 0.2
    Textbox.Size = UDim2.new(0, 146, 0, 20)

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Textbox

    local TextBox = Instance.new("TextBox")
    TextBox.Parent = Textbox
    TextBox.BackgroundTransparency = 1
    TextBox.Position = UDim2.new(0.026, 0, 0, 0)
    TextBox.Size = UDim2.new(0, 140, 0, 20)
    TextBox.ZIndex = 2
    TextBox.PlaceholderText = tostring(n)
    TextBox.Font = Enum.Font.SourceSansBold
    TextBox.Text = ""
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.TextSize = 15
    TextBox.TextStrokeTransparency = 1
    TextBox.TextXAlignment = Enum.TextXAlignment.Left

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "TextLabel"
    TextLabel.Parent = Textbox
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0.026, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 148, 0, 20)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.Text = ""
    TextLabel.TextColor3 = Color3.fromRGB(179, 179, 179)
    TextLabel.TextSize = 15
    TextLabel.TextStrokeTransparency = 1
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    TextBox.Changed:Connect(function(t)
        if t == "Text" and find ~= nil then
            local text = TextBox.Text
            TextLabel.Text = ""
            fs = ""

            if typeof(find) == "string" and find:lower() == "players" and text ~= "" then
                for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v.Name:lower():find(text:lower()) then
                        TextLabel.Text = text .. v.Name:sub(#text + 1)
                        fs = v.Name
                        break
                    elseif v.DisplayName:lower():find(text:lower()) then
                        TextLabel.Text = text .. v.DisplayName:sub(#text + 1)
                        fs = v.DisplayName
                        break
                    end
                end
            elseif typeof(find) == "table" and text ~= "" then
                for _, v in pairs(find) do
                    local str = tostring(v)
                    if str:lower():find(text:lower()) then
                        TextLabel.Text = text .. str:sub(#text + 1)
                        fs = str
                        break
                    end
                end
            end
        end
    end)

    TextBox.FocusLost:Connect(function()
        if uis:IsKeyDown(Enum.KeyCode.RightShift) or uis:IsKeyDown(Enum.KeyCode.LeftShift) then
            pcall(task.spawn, f, TextLabel.Text)
            TextBox.Text = fs
            TextLabel.Text = ""
        else
            pcall(task.spawn, f, TextBox.Text)
            TextLabel.Text = ""
        end
    end)
end


			resize()

			return self2
		end






















		function self:SplitFrame()
			local self2 = {}
			local g = 0

			local SplitHolder = Instance.new("Frame")
			local UIGradient = Instance.new("UIGradient")
			local UIListLayout = Instance.new("UIListLayout")

			SplitHolder.Name = "SplitFrame"
			SplitHolder.Parent = Holder
			SplitHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			SplitHolder.BackgroundTransparency = 0.200
			SplitHolder.BorderColor3 = Color3.fromRGB(23, 25, 52)
			SplitHolder.Size = UDim2.new(0, 153, 0, 20)
			SplitHolder.BackgroundTransparency = 1

			UIListLayout.Parent = SplitHolder
			UIListLayout.FillDirection = Enum.FillDirection.Horizontal
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder	

			function self2:Toggle(name,b,f)
				g = g + 1
				if g <= 2 then
					--local _G.XathenaGradient = _G.XathenaGradient --ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(46, 59, 145)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 49, 126))}
					local ofc = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(86, 87, 85)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(78, 77, 73))}
					local tog = b
					
					local Toggle = Instance.new("Frame")
					local TextButton = Instance.new("TextButton")
					local UIGradient = Instance.new("UIGradient")
		
					Toggle.Name = "Toggle"
					Toggle.Parent = SplitHolder
					Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Toggle.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Toggle.Size = UDim2.new(0, 154/2, 0, 20)
					Toggle.BackgroundTransparency = .2
		
					TextButton.Parent = Toggle
					TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.BackgroundTransparency = 1.000
					TextButton.BorderSizePixel = 3
					TextButton.Position = UDim2.new(0.026041666, 0, 0, 0)
					TextButton.Size = UDim2.new(0, 148/2, 0, 20)
					TextButton.Font = Enum.Font.SourceSansBold
					TextButton.Text = tostring(name)
					TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.TextSize = 15.000
					TextButton.TextStrokeTransparency = 1
					TextButton.TextXAlignment = Enum.TextXAlignment.Left
		
					UIGradient.Color = ((tog and _G.XathenaGradient) or (not tog and ofc))
					UIGradient.Rotation = 90
					UIGradient.Parent = Toggle
					
					if b then pcall(task.spawn, f, b)  end
		
					TextButton.MouseButton1Down:Connect(function()
						pcall(task.spawn, f, not tog) 
						tog = not tog
						UIGradient.Color = ((tog and _G.XathenaGradient) or (not tog and ofc))
					end)
				end
			end
	
			function self2:Button(n,f)
				g = g + 1
				if g <= 2 then
					local Button = Instance.new("Frame")
					local TextButton = Instance.new("TextButton")
					local UIGradient = Instance.new("UIGradient")
		
					Button.Name = "Button"
					Button.Parent = SplitHolder
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Button.Size = UDim2.new(0, 154/2, 0, 20)
					Button.BackgroundTransparency = .2
		
					TextButton.Parent = Button
					TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.BackgroundTransparency = 1.000
					TextButton.BorderSizePixel = 3
					TextButton.Position = UDim2.new(0, 0, 0, 0)
					TextButton.Size = UDim2.new(0, 148/2, 0, 20)
					TextButton.Font = Enum.Font.SourceSansBold
					TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.Text = tostring(n)
					TextButton.TextSize = 15.000
					TextButton.TextStrokeTransparency = 1
					TextButton.TextXAlignment = Enum.TextXAlignment.Left
		
					UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(86, 87, 85)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(78, 77, 73))}
					UIGradient.Rotation = 90
					UIGradient.Parent = Button

					TextButton.MouseButton1Down:Connect(f)
				end
			end
	
			function self2:Keybind(n,d,f)
				g = g + 1
				if g <= 2 then
					local k = d
		
					local Keybind = Instance.new("Frame")
					local TextButton = Instance.new("TextButton")
					local UIGradient = Instance.new("UIGradient")
		
					Keybind.Name = "Keybind"
					Keybind.Parent = SplitHolder
					Keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Keybind.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Keybind.Size = UDim2.new(0, 154/2, 0, 20)
					Keybind.BackgroundTransparency = .2
		
					TextButton.Parent = Keybind
					TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.BackgroundTransparency = 1.000
					TextButton.BorderSizePixel = 3
					TextButton.Position = UDim2.new(0, 0, 0, 0)
					TextButton.Size = UDim2.new(0, 148/2, 0, 20)
					TextButton.Font = Enum.Font.SourceSansBold
					TextButton.Text = tostring(n).." : "..tostring(d):sub(14):lower()
					TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
					TextButton.TextSize = 15.000
					TextButton.TextStrokeTransparency = 1
		
					UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(86, 87, 85)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(78, 77, 73))}
					UIGradient.Rotation = 90
					UIGradient.Parent = Keybind
		
					uis.InputBegan:Connect(function(m,m2)
						if not m2 then
							if not selecting then
								if m.KeyCode == k then
									pcall(task.spawn, f, k)
								end
							end
						end
					end)
		
					TextButton.MouseButton1Down:Connect(function()
						TextButton.Text = tostring(n).." : ..."
						selecting = true
						local con; con = uis.InputBegan:Connect(function(m)
							if m.KeyCode ~= Enum.KeyCode.Unknown then
								k = m.KeyCode
								TextButton.Text = tostring(n).." : "..tostring(k):sub(14):lower()
								selecting = false
								con:Disconnect()
							end
						end)
					end)
				end
			end
	
			function self2:Slider(n,min,max,default,precise,f)
				g = g + 1
				if g <= 2 then
					local Slider = Instance.new("Frame")
					local SliderFrame = Instance.new("TextButton")
					local UIGradient = Instance.new("UIGradient")
					local Slider_2 = Instance.new("TextButton")
					local OnToggleGradient = Instance.new("UIGradient")
		
					Slider.Name = "Slider"
					Slider.Parent = SplitHolder
					Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Slider.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Slider.Position = UDim2.new(0, 0, 0, 0)
					Slider.Size = UDim2.new(0, 154/2, 0, 20)
					Slider.BackgroundTransparency = .2
		
					SliderFrame.Parent = Slider
					SliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					SliderFrame.BackgroundTransparency = 1.000
					SliderFrame.BorderSizePixel = 3
					SliderFrame.Position = UDim2.new(0, 0, 0, 0)
					SliderFrame.Size = UDim2.new(0, 148/2, 0, 20)
					SliderFrame.Font = Enum.Font.SourceSansBold
					SliderFrame.Text = tostring(n)..": "..tostring(default)
					SliderFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
					SliderFrame.TextSize = 15.000
					SliderFrame.TextStrokeTransparency = 1
					SliderFrame.ZIndex = 2
		
					UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(86, 87, 85)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(78, 77, 73))}
					UIGradient.Rotation = 90
					UIGradient.Parent = Slider
		
					Slider_2.Name = "Slider"
					Slider_2.Parent = Slider
					Slider_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Slider_2.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Slider_2.BorderSizePixel = 1
					Slider_2.Position = UDim2.new(0, 0, 0, 1)
					Slider_2.Size = UDim2.new(0, 12, 0, 18)
					Slider_2.Font = Enum.Font.SourceSans
					Slider_2.Text = ""
					Slider_2.TextColor3 = Color3.fromRGB(0, 0, 0)
					Slider_2.TextSize = 15.000
					Slider_2.BackgroundTransparency = .2
		
					OnToggleGradient.Color = _G.XathenaGradient --ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(46, 59, 145)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 49, 126))}
					OnToggleGradient.Rotation = 90
					OnToggleGradient.Name = "OnToggleGradient"
					OnToggleGradient.Parent = Slider_2
		
					uis.InputEnded:Connect(function(m)
						if m.UserInputType == Enum.UserInputType.MouseButton1 then
							if con then
								con:Disconnect()
								con = nil
							end
						end
					end)
			
					local function move()
						if not con then
							con = run.Stepped:Connect(function()
								local m = uis:GetMouseLocation()
								local r = math.clamp(((m.X-Slider_2.AbsoluteSize.X) - SliderFrame.AbsolutePosition.X)/(SliderFrame.AbsoluteSize.X),0,1)
								local vtn = min + (max - min)*r
				
								vtn = math.clamp(vtn,min,max)
								Slider_2.Position = UDim2.new(r*.92, 0, 0, 1)
				
								if not precise then
									vtn = math.round(vtn)
								else
									vtn = tonumber(tostring(vtn):sub(1,4))
								end
	
								SliderFrame.Text = tostring(n)..": "..tostring(vtn)
								pcall(task.spawn, f, vtn) 
							end)
						end
					end
					
					SliderFrame.MouseButton1Down:Connect(move)
					Slider_2.MouseButton1Down:Connect(move)
				end
			end
	
			function self2:TextBox(n,find,f)
				g = g + 1
				if g <= 2 then
					local Textbox = Instance.new("Frame")
					local UIGradient = Instance.new("UIGradient")
					local TextBox = Instance.new("TextBox")
					local TextLabel = Instance.new("TextLabel")
		
					Textbox.Name = "Textbox"
					Textbox.Parent = SplitHolder
					Textbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Textbox.BorderColor3 = Color3.fromRGB(23, 25, 52)
					Textbox.Position = UDim2.new(0, 0, 0, 0)
					Textbox.Size = UDim2.new(0, 154/2, 0, 20)
					Textbox.BackgroundTransparency = .2
		
					UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(86, 87, 85)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(78, 77, 73))}
					UIGradient.Rotation = 90
					UIGradient.Parent = Textbox
		
					TextBox.Parent = Textbox
					TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextBox.BackgroundTransparency = 1.000
					TextBox.Position = UDim2.new(0.0267857146, 0, 0, 0)
					TextBox.Size = UDim2.new(0, 148/2, 0, 20)
					TextBox.ZIndex = 2
					TextBox.PlaceholderText = tostring(n)
					TextBox.Font = Enum.Font.SourceSansBold
					TextBox.Text = ""
					TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
					TextBox.TextSize = 15.000
					TextBox.TextStrokeTransparency = 1
					TextBox.TextXAlignment = Enum.TextXAlignment.Left
		
					TextLabel.Name = "TextLabel"
					TextLabel.Parent = Textbox
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0.0267857146, 0, 0, 0)
					TextLabel.Size = UDim2.new(0, 148/2, 0, 20)
					TextLabel.Font = Enum.Font.SourceSansBold
					TextLabel.Text = ""
					TextLabel.TextColor3 = Color3.fromRGB(179, 179, 179)
					TextLabel.TextSize = 15.000
					TextLabel.TextStrokeTransparency = 1
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left
					local fs = ""
		
					TextBox.Changed:Connect(function(t)
						if t == "Text" and find ~= nil then
							local text = TextBox.Text
							if typeof(find) == "string" and find:lower() == "players" and TextBox.Text ~= "" then
								for i,v in pairs(game:GetService("Players"):GetPlayers()) do
									if v.Name:lower():find(text:lower()) then
										TextLabel.Text = TextBox.Text..v.Name:sub(#TextBox.Text+1)
										fs = v.Name
										break
									end
									
									if v.DisplayName:lower():find(text:lower()) then
										TextLabel.Text = TextBox.Text..v.DisplayName:sub(#TextBox.Text+1)
										fs = v.DisplayName
										break
									end
								end
							end
		
							if typeof(find) == "table" and TextBox.Text ~= "" then
								for i,v in pairs(find) do
									if tostring(v):lower():find(text:lower()) then
										TextLabel.Text = TextBox.Text..tostring(v):sub(#TextBox.Text+1)
										fs = tostring(v)
										break
									end
								end
							end
						end
					end)
		
					TextBox.FocusLost:Connect(function()
						if uis:IsKeyDown(Enum.KeyCode.RightShift) or uis:IsKeyDown(Enum.KeyCode.LeftShift) then
							pcall(task.spawn, f, TextLabel.Text)
							TextBox.Text = fs
							TextLabel.Text = ""
						else
							pcall(task.spawn, f, TextBox.Text)
							TextLabel.Text = ""
						end
					end)
				end
			end
			resize()
			return self2
		end
		resize()
		m = m + 1
		return self
	end
	return ui
end

_G.SetXathenaGradient = function(newGradient)
    if typeof(newGradient) ~= "ColorSequence" then
        warn("SetXathenaGradient: Argument must be a ColorSequence.")
        return
    end

    local CoreGui = game:GetService("CoreGui")
    local ui = CoreGui:FindFirstChild("Athena ui Remake")
    if not ui then
        warn("SetXathenaGradient: UI not found.")
        return
    end

    local oldGradient = _G.XathenaGradient
    _G.XathenaGradient = newGradient

    local updated = 0
    for _, obj in ipairs(ui:GetDescendants()) do
        if obj:IsA("UIGradient") and tostring(obj.Color) == tostring(oldGradient) then
            obj.Color = newGradient
            updated += 1
        end
    end

   -- print("Gradient Updated", updated, "UIGradient(s)")
end


return ret, settings
